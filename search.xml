<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo github pages搭建博客</title>
      <link href="/2019/10/12/hexo-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/10/12/hexo-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>开通githubpage</li><li>本地安装git、node.js、hexo</li><li>添加域名解析，指向githubpage</li></ol><h3 id="开通githubpage"><a href="#开通githubpage" class="headerlink" title="开通githubpage"></a>开通githubpage</h3><p>在github上创建一个新的repo，命名为username&lt;github的username&gt;.github.io</p><p>进入repo，点击setting，找到Github Pages，将source改为master，并点击save保存</p><p><img src="/2019/10/12/hexo-github-pages搭建博客/gitpages.jpg" alt="gitpages"></p><h3 id="安装git、node、hexo"><a href="#安装git、node、hexo" class="headerlink" title="安装git、node、hexo"></a>安装git、node、hexo</h3><p>git和node没什么好说的，必须先装好</p><p>重点说下hexo部分</p><p>本地新建一个文件夹，打开该目录的命令行，安装hexo-cli：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开可以显示<a href="http://localhost:4000，用浏览器打开可以看到默认的样式，到这里通过hexo生成blog就算是初步完成了。详细的可以去了解下hexo生成出来的项目目录结构，方便资源调整，代码编写。" target="_blank" rel="noopener">http://localhost:4000，用浏览器打开可以看到默认的样式，到这里通过hexo生成blog就算是初步完成了。详细的可以去了解下hexo生成出来的项目目录结构，方便资源调整，代码编写。</a></p><p>接下来要配置git发布相关</p><p>打开根目录下的_config.yml找到其中的deploy项，在其中添加github相关配置，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">github的git工程地址</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>如果想要一键部署到github，需要安装辅助插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --saves</span><br></pre></td></tr></table></figure><p>然后使用命令发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h3 id="添加域名解析，指向githubpage"><a href="#添加域名解析，指向githubpage" class="headerlink" title="添加域名解析，指向githubpage"></a>添加域名解析，指向githubpage</h3><p>将域名做CNAME解析，解析到username.github.io这个地址</p><p>在hexo工程的source目录下建一个CNAME文件，里面写入解析的域名，即完成博客搭建</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地管理和切换多个github账号</title>
      <link href="/2019/10/12/%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%92%8C%E5%88%87%E6%8D%A2%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/"/>
      <url>/2019/10/12/%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%92%8C%E5%88%87%E6%8D%A2%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大多数的我们都会遇到这样一个问题：公司有一个 github 账户，这个是专门为工作准备的。而我们自己也有一个自己的私人 github 账户，有事没事做做自己的项目，写写自己感兴趣的东西。可是，我们怎么在电脑上把公司 github 切换到自己的私人github 账号上呢？</p><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><ol><li>创建ssh密钥；</li><li>将密钥添加到 github 账户；</li><li>创建 config 文件，管理单独的 key</li><li>更新存储的 key</li><li>测试 git clone 和 git push</li><li>在终端上切换 github 账号</li></ol><p><em>注意：以下为windows上操作，如果是在别的操作系统上，直接换成对应的操作命令即可。</em></p><h3 id="1、创建SSH密钥"><a href="#1、创建SSH密钥" class="headerlink" title="1、创建SSH密钥"></a>1、创建SSH密钥</h3><p>以多个帐号为例，一个帐号为admin，一个帐号为manager</p><ul><li>打开cmd</li><li>依次执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Users\account\.ssh</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"admin@xxx.com"</span> </span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"manager@xxx.com"</span></span><br></pre></td></tr></table></figure><ul><li>当出现 “Enter file in which to save the key” 的提示时，将文件保存为 id_rsa_&lt;&gt;。将文件保存为 ~/.ssh/id_rsa_admin和 ~/.ssh/id_rsa_manager;</li></ul><p>生成后会在C:\Users\account\.ssh中看到以下四个文件</p><ul><li>id_rsa_admin</li><li>id_rsa_admin.pub</li><li>id_rsa_manager</li><li>id_rsa_manager.pub</li></ul><h3 id="2、将各自新密钥绑定到各自对应github账号"><a href="#2、将各自新密钥绑定到各自对应github账号" class="headerlink" title="2、将各自新密钥绑定到各自对应github账号"></a>2、将各自新密钥绑定到各自对应github账号</h3><p>此处不做详细描述</p><h3 id="3、创建一个配置config文件来管理key"><a href="#3、创建一个配置config文件来管理key" class="headerlink" title="3、创建一个配置config文件来管理key"></a>3、创建一个配置config文件来管理key</h3><p>在C:\Users\account\.ssh路径中创建一个名为config的文件</p><p>编辑文件内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">admin</span></span><br><span class="line"><span class="string">HostName</span> <span class="string">github.com</span></span><br><span class="line"><span class="string">User</span> <span class="string">git</span></span><br><span class="line"><span class="string">IdentityFile</span> <span class="attr">C:\Users\account\.ssh\id_rsa_admin</span></span><br><span class="line"></span><br><span class="line"><span class="string">Host</span> <span class="string">manager</span></span><br><span class="line"><span class="string">HostName</span> <span class="string">github.com</span></span><br><span class="line"><span class="string">User</span> <span class="string">git</span></span><br><span class="line"><span class="string">IdentityFile</span> <span class="attr">C:\Users\account\.ssh\id_rsa_manager</span></span><br></pre></td></tr></table></figure><h3 id="4、更新存储的key"><a href="#4、更新存储的key" class="headerlink" title="4、更新存储的key"></a>4、更新存储的key</h3><p>在更新存储之前，我们要先检查一下本地的 OpenSSH 服务有没有开启，不然会报错。</p><p>开启 ssh 服务的流程为：</p><ol><li>设置 → 管理可选功能 → 添加功能 → [OpenSSH服务器]</li><li>计算机管理 → 服务和应用程序 → 服 务→ OpenSSH Authentication Agent&amp;OpenSSH Server → 右击</li></ol><p>开启SSH服务之后，我们就可以使用ssh命令了。</p><p>清除当前存储的认证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\account\.ssh\&gt;ssh-add -D</span><br></pre></td></tr></table></figure><p>增加新的keys：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\account\.ssh\&gt;ssh-add id_rsa_admin</span><br><span class="line">C:\Users\account\.ssh\&gt;ssh-add id_rsa_manager</span><br></pre></td></tr></table></figure><p>验证一下！ github 是否能识别到这些 keys，在cmd中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T admin</span><br></pre></td></tr></table></figure><p>可以看到 “Hi huangyuanzhen! You’ve successfully authenticated, but GitHub does not provide shell access.” 的提示语。这表明，github 能识别这些 keys 了。</p><h3 id="5、测试-clone-和-push"><a href="#5、测试-clone-和-push" class="headerlink" title="5、测试 clone 和 push"></a>5、测试 clone 和 push</h3><p>找个admin帐号下对应的正常的项目，举个例子git地址为：<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:xxxx(github帐号)/hello-github.git</p><p>将地址改为：git@admin:xxxx(github帐号)/hello-github.git</p><p>然后测试正常的clone和push操作</p><h3 id="6、在终端上切换-github-账号"><a href="#6、在终端上切换-github-账号" class="headerlink" title="6、在终端上切换 github 账号"></a>6、在终端上切换 github 账号</h3><p>如果之前已经用 git remote add 和远程 仓库建立过连接，我们需要先清除当前连接，不然会报错：“fatal: remote origin already exists.”；清除当前连接之后，然后连接新的账号里的仓库，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote git add origin git@admin:xxxx/work-test.git</span><br></pre></td></tr></table></figure><p>这样就能做到切换远程，必须将地址改为对应的config里面的host</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://mherman.org/blog/managing-multiple-github-accounts/" target="_blank" rel="noopener">Managing Multiple Github Accounts</a></li><li><a href="https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574" target="_blank" rel="noopener">Quick Tip: How to Work with GitHub and Multiple Accounts</a></li><li><a href="https://www.cnblogs.com/sunchong/p/10171870.html" target="_blank" rel="noopener">图解 – Win10 OpenSSH</a></li></ul><p><font size="1"><em>原文链接：<a href="https://my.oschina.net/hyzccc/blog/3042701" target="_blank" rel="noopener">https://my.oschina.net/hyzccc/blog/3042701</a></em></font></p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇</title>
      <link href="/2019/10/11/hello-hexo/"/>
      <url>/2019/10/11/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
