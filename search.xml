<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>presto搭建</title>
      <link href="/2019/10/12/presto%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/10/12/presto%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Presto的部署"><a href="#Presto的部署" class="headerlink" title="Presto的部署"></a>Presto的部署</h1><h2 id="Presto安装"><a href="#Presto安装" class="headerlink" title="Presto安装"></a>Presto安装</h2><p>1、下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo1.maven.org/maven2/com/facebook/presto/presto-server/&lt;VERSION&gt;/presto-server-&lt;VERSION&gt;.tar.gz</span><br></pre></td></tr></table></figure><p>2、解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf presto-server-&lt;VERSION&gt;.tar.gz -C /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>创建数据目录和解压目录</p><h2 id="Presto配置"><a href="#Presto配置" class="headerlink" title="Presto配置"></a>Presto配置</h2><p>在安装目录里创建etc目录。etc目录中会有以下配置：</p><ul><li>节点属性（Node Properties）：每个节点的环境配置</li><li>JVM配置（JVM Config）：Java虚拟机的命令行选项</li><li>配置属性（Config Properties）：Presto server的配置</li><li>Catalog属性（Catalog Properties）：配置数据源Connector</li></ul><h3 id="节点属性（Node-Properties）"><a href="#节点属性（Node-Properties）" class="headerlink" title="节点属性（Node Properties）"></a>节点属性（Node Properties）</h3><p>节点属性文件etc/node.properties，包含每个节点的配置。一个节点是一个Presto实例。这文件一般是在Presto第一次安装时创建的。以下是最小配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node.environment=production</span><br><span class="line">node.id=ffffffff-ffff-ffff-ffff-ffffffffffff</span><br><span class="line">node.data-dir=/var/presto/data</span><br></pre></td></tr></table></figure><p>node.environment：环境名字，Presto集群中的节点的环境名称都必须一样。</p><p>node.id：唯一标识，每个节点的标识都必须是唯一的。就算重启或者升级都必须保持原来的标识。</p><p>node.data-dir：数据目录，Presto用来存放日志及其他数据。</p><h3 id="JVM配置（JVM-Config）"><a href="#JVM配置（JVM-Config）" class="headerlink" title="JVM配置（JVM Config）"></a>JVM配置（JVM Config）</h3><p>JVM配置文件etc/jvm.config，包含启动Java虚拟机时的命令行选项。格式是每一行是一个命令行选项。此文件数据是由shell解析，所以选项中包含空格或特殊字符会被忽略。</p><p>以下是参考配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-server</span><br><span class="line">-Xmx16G</span><br><span class="line">-XX:+UseG1GC</span><br><span class="line">-XX:G1HeapRegionSize=32M</span><br><span class="line">-XX:+UseGCOverheadLimit</span><br><span class="line">-XX:+ExplicitGCInvokesConcurrent</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:+ExitOnOutOfMemoryError</span><br></pre></td></tr></table></figure><p>因为OutOfMemoryError会导致JVM存在不一致状态，所以用heap dump来debug，来找出进程为什么崩溃的原因。</p><h3 id="配置属性（Config-Properties）"><a href="#配置属性（Config-Properties）" class="headerlink" title="配置属性（Config Properties）"></a>配置属性（Config Properties）</h3><p>配置属性文件etc/config.properties，包含Presto Server配置。Presto server可以同时为coordinator和worker，但一个大集群里最好就是只指定一台机器为coordinator。</p><p>以下是参考coordinator的最小配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">coordinator=true</span><br><span class="line">node-scheduler.include-coordinator=false</span><br><span class="line">http-server.http.port=8080</span><br><span class="line">query.max-memory=50GB</span><br><span class="line">query.max-memory-per-node=1GB</span><br><span class="line">discovery-server.enabled=true</span><br><span class="line">discovery.uri=http://example.net:8080</span><br></pre></td></tr></table></figure><p>以下是参考worker的最小配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">coordinator=false</span><br><span class="line">http-server.http.port=8080</span><br><span class="line">query.max-memory=50GB</span><br><span class="line">query.max-memory-per-node=1GB</span><br><span class="line">discovery.uri=http://example.net:8080</span><br></pre></td></tr></table></figure><p>如果适用于测试目的，需要将一台机器同时配置为coordinator和worker，则使用以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">coordinator=true</span><br><span class="line">node-scheduler.include-coordinator=true</span><br><span class="line">http-server.http.port=8080</span><br><span class="line">query.max-memory=5GB</span><br><span class="line">query.max-memory-per-node=1GB</span><br><span class="line">discovery-server.enabled=true</span><br><span class="line">discovery.uri=http://example.net:8080</span><br></pre></td></tr></table></figure><p>coordinator： 是否运行该实例为coordinator（接受client的查询和管理查询执行）。<br>node-scheduler.include-coordinator：coordinator是否也作为work。对于大型集群来说，在coordinator里做worker的工作会影响查询性能。<br>http-server.http.port：指定HTTP端口。Presto使用HTTP来与外部和内部进行交流。<br>query.max-memory：查询能用到的最大总内存<br>query.max-memory-per-node：查询能用到的最大单结点内存<br>discovery-server.enabled：Presto使用Discovery服务去找到集群中的所有结点。每个Presto实例在启动时都会在Discovery服务里注册。这样可以简化部署，不需要额外的服务，Presto的coordinator内置一个Discovery服务。也是使用HTTP端口。<br>discovery.uri：Discovery服务的URI。将example.net:8080替换为coordinator的host和端口。<strong>这个URI不能以斜杠结尾，这个错误需特别注意，不然会报404错误</strong>。</p><p>另外还有以下属性：<br>jmx.rmiregistry.port: 指定JMX RMI的注册。JMX client可以连接此端口<br>jmx.rmiserver.port: 指定JXM RMI的服务器。可通过JMX监听。</p><h3 id="Catalog属性（Catalog-Properties）"><a href="#Catalog属性（Catalog-Properties）" class="headerlink" title="Catalog属性（Catalog Properties）"></a>Catalog属性（Catalog Properties）</h3><p>Presto通过connector访问数据。而connector是挂载（mount）在catelog中。connector支持catelog里所有的schema和table。举个例子，Hive connector映射每个Hive数据库到schema，因此Hive connector挂载在hive catelog（所以可以把catelog理解为目录，挂载），而且Hive包含table clicks在数据库web，所以这个table在Presto是hive.web.clicks。<br>Catalog的注册是通过etc/catalog目录下的catalog属性文件。例如，创建etc/catalog/jmx.properties，将jmxconnector挂载在jmx catelog：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connector.name=jmx</span><br></pre></td></tr></table></figure><p>hive的注册，创建etc/catalog/hive.properties，参考最小配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connector.name=hive-hadoop2</span><br><span class="line">hive.metastore.uri=thrift://example.net:9083</span><br><span class="line">hive.config.resources=/etc/hadoop/conf/core-site.xml,/etc/hadoop/conf/hdfs-site.xml</span><br></pre></td></tr></table></figure><h2 id="运行Presto"><a href="#运行Presto" class="headerlink" title="运行Presto"></a>运行Presto</h2><p>启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/launcher start</span><br></pre></td></tr></table></figure><p>日志在var/log目录下：<br>launcher.log：记录服务初始化情况和一些JVM的诊断。<br>server.log：Presto的主要日志文件。会自动被压缩。<br>http-request.log：记录HTTP请求。会自动被压缩。</p><h2 id="运行Presto命令行界面"><a href="#运行Presto命令行界面" class="headerlink" title="运行Presto命令行界面"></a>运行Presto命令行界面</h2><ol><li>下载 presto-cli-<version>-executable.jar</version></li><li>修改名字 presto-cli-<version>-executable.jar为 presto</version></li><li>修改执行权限chmod +x</li><li>运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./presto --server localhost:8080 --catalog hive --schema default</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> presto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> presto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看Gradle某jar包的依赖</title>
      <link href="/2019/10/12/%E6%9F%A5%E7%9C%8BGradle%E6%9F%90jar%E5%8C%85%E7%9A%84%E4%BE%9D%E8%B5%96/"/>
      <url>/2019/10/12/%E6%9F%A5%E7%9C%8BGradle%E6%9F%90jar%E5%8C%85%E7%9A%84%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<p>执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle :模块:dependencyInsight --dependency 包名 --configuration compile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij IDEA运行报Command line is too long</title>
      <link href="/2019/10/12/Intellij-IDEA%E8%BF%90%E8%A1%8C%E6%8A%A5Command-line-is-too-long/"/>
      <url>/2019/10/12/Intellij-IDEA%E8%BF%90%E8%A1%8C%E6%8A%A5Command-line-is-too-long/</url>
      
        <content type="html"><![CDATA[<h3 id="Intellij-IDEA运行报Command-line-too-long"><a href="#Intellij-IDEA运行报Command-line-too-long" class="headerlink" title="Intellij IDEA运行报Command line too long"></a>Intellij IDEA运行报Command line too long</h3><p>修改项目.idea/workspace.xml</p><p>找到标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"PropertiesComponent"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在标签里加一行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dynamic.classpath"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo github pages搭建博客</title>
      <link href="/2019/10/12/hexo-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/10/12/hexo-github-pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>开通githubpage</li><li>本地安装git、node.js、hexo</li><li>添加域名解析，指向githubpage</li></ol><h3 id="开通githubpage"><a href="#开通githubpage" class="headerlink" title="开通githubpage"></a>开通githubpage</h3><p>在github上创建一个新的repo，命名为username&lt;github的username&gt;.github.io</p><p>进入repo，点击setting，找到Github Pages，将source改为master，并点击save保存</p><p><img src="/2019/10/12/hexo-github-pages搭建博客/gitpages.jpg" alt="gitpages"></p><h3 id="安装git、node、hexo"><a href="#安装git、node、hexo" class="headerlink" title="安装git、node、hexo"></a>安装git、node、hexo</h3><p>git和node没什么好说的，必须先装好</p><p>重点说下hexo部分</p><p>本地新建一个文件夹，打开该目录的命令行，安装hexo-cli：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开可以显示<a href="http://localhost:4000，用浏览器打开可以看到默认的样式，到这里通过hexo生成blog就算是初步完成了。详细的可以去了解下hexo生成出来的项目目录结构，方便资源调整，代码编写。" target="_blank" rel="noopener">http://localhost:4000，用浏览器打开可以看到默认的样式，到这里通过hexo生成blog就算是初步完成了。详细的可以去了解下hexo生成出来的项目目录结构，方便资源调整，代码编写。</a></p><p>接下来要配置git发布相关</p><p>打开根目录下的_config.yml找到其中的deploy项，在其中添加github相关配置，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">github的git工程地址</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>如果想要一键部署到github，需要安装辅助插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --saves</span><br></pre></td></tr></table></figure><p>然后使用命令发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h3 id="添加域名解析，指向githubpage"><a href="#添加域名解析，指向githubpage" class="headerlink" title="添加域名解析，指向githubpage"></a>添加域名解析，指向githubpage</h3><p>将域名做CNAME解析，解析到username.github.io这个地址</p><p>在hexo工程的source目录下建一个CNAME文件，里面写入解析的域名，即完成博客搭建</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地管理和切换多个github账号</title>
      <link href="/2019/10/12/%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%92%8C%E5%88%87%E6%8D%A2%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/"/>
      <url>/2019/10/12/%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%92%8C%E5%88%87%E6%8D%A2%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大多数的我们都会遇到这样一个问题：公司有一个 github 账户，这个是专门为工作准备的。而我们自己也有一个自己的私人 github 账户，有事没事做做自己的项目，写写自己感兴趣的东西。可是，我们怎么在电脑上把公司 github 切换到自己的私人github 账号上呢？</p><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><ol><li>创建ssh密钥；</li><li>将密钥添加到 github 账户；</li><li>创建 config 文件，管理单独的 key</li><li>更新存储的 key</li><li>测试 git clone 和 git push</li><li>在终端上切换 github 账号</li></ol><p><em>注意：以下为windows上操作，如果是在别的操作系统上，直接换成对应的操作命令即可。</em></p><h3 id="1、创建SSH密钥"><a href="#1、创建SSH密钥" class="headerlink" title="1、创建SSH密钥"></a>1、创建SSH密钥</h3><p>以多个帐号为例，一个帐号为admin，一个帐号为manager</p><ul><li>打开cmd</li><li>依次执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Users\account\.ssh</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"admin@xxx.com"</span> </span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"manager@xxx.com"</span></span><br></pre></td></tr></table></figure><ul><li>当出现 “Enter file in which to save the key” 的提示时，将文件保存为 id_rsa_&lt;&gt;。将文件保存为 ~/.ssh/id_rsa_admin和 ~/.ssh/id_rsa_manager;</li></ul><p>生成后会在C:\Users\account\.ssh中看到以下四个文件</p><ul><li>id_rsa_admin</li><li>id_rsa_admin.pub</li><li>id_rsa_manager</li><li>id_rsa_manager.pub</li></ul><h3 id="2、将各自新密钥绑定到各自对应github账号"><a href="#2、将各自新密钥绑定到各自对应github账号" class="headerlink" title="2、将各自新密钥绑定到各自对应github账号"></a>2、将各自新密钥绑定到各自对应github账号</h3><p>此处不做详细描述</p><h3 id="3、创建一个配置config文件来管理key"><a href="#3、创建一个配置config文件来管理key" class="headerlink" title="3、创建一个配置config文件来管理key"></a>3、创建一个配置config文件来管理key</h3><p>在C:\Users\account\.ssh路径中创建一个名为config的文件</p><p>编辑文件内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">admin</span></span><br><span class="line"><span class="string">HostName</span> <span class="string">github.com</span></span><br><span class="line"><span class="string">User</span> <span class="string">git</span></span><br><span class="line"><span class="string">IdentityFile</span> <span class="attr">C:\Users\account\.ssh\id_rsa_admin</span></span><br><span class="line"></span><br><span class="line"><span class="string">Host</span> <span class="string">manager</span></span><br><span class="line"><span class="string">HostName</span> <span class="string">github.com</span></span><br><span class="line"><span class="string">User</span> <span class="string">git</span></span><br><span class="line"><span class="string">IdentityFile</span> <span class="attr">C:\Users\account\.ssh\id_rsa_manager</span></span><br></pre></td></tr></table></figure><h3 id="4、更新存储的key"><a href="#4、更新存储的key" class="headerlink" title="4、更新存储的key"></a>4、更新存储的key</h3><p>在更新存储之前，我们要先检查一下本地的 OpenSSH 服务有没有开启，不然会报错。</p><p>开启 ssh 服务的流程为：</p><ol><li>设置 → 管理可选功能 → 添加功能 → [OpenSSH服务器]</li><li>计算机管理 → 服务和应用程序 → 服 务→ OpenSSH Authentication Agent&amp;OpenSSH Server → 右击</li></ol><p>开启SSH服务之后，我们就可以使用ssh命令了。</p><p>清除当前存储的认证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\account\.ssh\&gt;ssh-add -D</span><br></pre></td></tr></table></figure><p>增加新的keys：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\account\.ssh\&gt;ssh-add id_rsa_admin</span><br><span class="line">C:\Users\account\.ssh\&gt;ssh-add id_rsa_manager</span><br></pre></td></tr></table></figure><p>验证一下！ github 是否能识别到这些 keys，在cmd中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T admin</span><br></pre></td></tr></table></figure><p>可以看到 “Hi huangyuanzhen! You’ve successfully authenticated, but GitHub does not provide shell access.” 的提示语。这表明，github 能识别这些 keys 了。</p><h3 id="5、测试-clone-和-push"><a href="#5、测试-clone-和-push" class="headerlink" title="5、测试 clone 和 push"></a>5、测试 clone 和 push</h3><p>找个admin帐号下对应的正常的项目，举个例子git地址为：<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:xxxx(github帐号)/hello-github.git</p><p>将地址改为：git@admin:xxxx(github帐号)/hello-github.git</p><p>然后测试正常的clone和push操作</p><h3 id="6、在终端上切换-github-账号"><a href="#6、在终端上切换-github-账号" class="headerlink" title="6、在终端上切换 github 账号"></a>6、在终端上切换 github 账号</h3><p>如果之前已经用 git remote add 和远程 仓库建立过连接，我们需要先清除当前连接，不然会报错：“fatal: remote origin already exists.”；清除当前连接之后，然后连接新的账号里的仓库，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote git add origin git@admin:xxxx/work-test.git</span><br></pre></td></tr></table></figure><p>这样就能做到切换远程，必须将地址改为对应的config里面的host</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://mherman.org/blog/managing-multiple-github-accounts/" target="_blank" rel="noopener">Managing Multiple Github Accounts</a></li><li><a href="https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574" target="_blank" rel="noopener">Quick Tip: How to Work with GitHub and Multiple Accounts</a></li><li><a href="https://www.cnblogs.com/sunchong/p/10171870.html" target="_blank" rel="noopener">图解 – Win10 OpenSSH</a></li></ul><p><font size="1"><em>原文链接：<a href="https://my.oschina.net/hyzccc/blog/3042701" target="_blank" rel="noopener">https://my.oschina.net/hyzccc/blog/3042701</a></em></font></p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇</title>
      <link href="/2019/10/11/hello-hexo/"/>
      <url>/2019/10/11/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
